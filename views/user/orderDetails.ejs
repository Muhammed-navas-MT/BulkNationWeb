<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Orders - Bulk Nation</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }
        .navbar {
            background-color: #ff8c00;
        }
        .navbar-brand, .nav-link {
            color: white !important;
        }
        .nav-link:hover, .nav-link.active {
            color: #ffd700 !important;
        }
        .card {
            border: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        .btn-primary {
            background-color: #ff8c00;
            border-color: #ff8c00;
        }
        .btn-primary:hover {
            background-color: #e67e00;
            border-color: #e67e00;
        }
        .table th {
            background-color: #ff8c00;
            color: white;
        }
        .badge {
            font-size: 0.8em;
            padding: 0.5em 0.7em;
        }
        #specific-container {
            background-color: white;
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            max-width: 500px;
            margin: 50px auto;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        #specific-container img {
            max-width: 200px;
            margin-bottom: 20px;
        }
        #specific-container .cta-button {
            background-color: #ff8c00;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
            transition: background-color 0.3s ease;
        }
        #specific-container .cta-button:hover {
            background-color: #e67e00;
        }
        .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .pagination a {
        text-decoration: none;
        padding: 10px 15px;
        margin: 0 5px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f4f4f4;
        color: #333;
        transition: background-color 0.3s, color 0.3s;
    }

    .pagination a:hover {
        background-color: #007bff;
        color: #fff;
    }

    .pagination span {
        margin: 0 10px;
        font-weight: bold;
        color: #555;
    }

    .pagination a.disabled {
        pointer-events: none;
        color: #aaa;
        background-color: #f4f4f4;
    }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand fw-bold" href="/">Bulk Nation</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/userProfile"><i class="fas fa-user"></i> My Profile</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/orderDetails"><i class="fas fa-box"></i> My Orders</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/userAdresses"><i class="fas fa-map-marker-alt"></i> My Addresses</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/wallet"><i class="fas fa-wallet"></i> BN Cash</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#"><i class="fas fa-credit-card"></i> Saved Cards</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
        <h2 class="mb-4">My Orders</h2>
        
        <% if (orders.length === 0) { %>
            <div id="specific-container">
                <img src="assets/imgs/banner/order.png" alt="Empty shopping cart illustration" class="img-fluid">
                <h3 class="mt-3">No Orders Yet!</h3>
                <p class="text-muted">Looks like you haven't shopped with us yet. Start exploring our amazing products!</p>
                <a href="/shopPage" class="cta-button">Start Shopping</a>
            </div>
        <% } else { %>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Total</th>
                            <th>Items</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr>
                                <td><%= order.orderId %></td>
                                <td><%= new Date(order.createdOn).toLocaleDateString() %></td>
                                <td>
                                    <span class="badge bg-<%= 
                                        order.status === 'Pending' ? 'warning' :
                                        order.status === 'Processing' ? 'info' :
                                        order.status === 'Shipped' ? 'primary' :
                                        order.status === 'Delivered' ? 'success' :
                                        order.status === 'Cancelled' ? 'danger' :
                                        'secondary'
                                    %>">
                                        <%= order.status %>
                                    </span>
                                </td>
                                <td id="finalAmount">â‚¹<%= order.finalAmount %></td>
                                <td>
                                    <% if (order.orderedItems && order.orderedItems.length > 0) { %>
                                        <ul class="list-unstyled">
                                            <% order.orderedItems.forEach(item => { %>
                                                <li><small><%= item.name %> (x<%= item.quantity %>)</small></li>
                                            <% }); %>
                                        </ul>
                                    <% } else { %>
                                        <small class="text-muted">No items</small>
                                    <% } %>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="/singeOrder?id=<%= order.orderId %>" class="btn btn-sm btn-outline-primary">View</a>
                                        <% if(order.payment_status == "Pending" && order.paymentMethod=="Online"){ %>
                                            <button onclick="rePayment('<%= order.orderId %>')"                                                class="btn btn-sm btn-outline-success">Pay</button>
                                        <% } else if(order.status !== "Cancelled" && order.status !== "Delivered" && order.status !== "Return Request" && order.status !== "Returned" && order.status !== "Return Reject" ) { %>
                                            <button id="cancel" onclick="cancelOrder('<%= order.orderId %>')"                                                 class="btn btn-sm btn-outline-danger">Cancel</button>
                                        <% } else if(order.status == "Delivered"){ %>
                                            <button onclick="returnOrder('<%= order.orderId %>')" class="btn btn-sm btn-outline-warning">Return</button>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        <% } %>
    </div>
    <div class="pagination">
        <% if (currentPage > 1) { %>
            <a href="?page=<%= currentPage - 1 %>">Previous</a>
        <% } else { %>
            <a class="disabled">Previous</a>
        <% } %>
        <span>Page <%= currentPage %> of <%= totalPages %></span>
        <% if (currentPage < totalPages) { %>
            <a href="?page=<%= currentPage + 1 %>">Next</a>
        <% } else { %>
            <a class="disabled">Next</a>
        <% } %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>

        
        async function cancelOrder(orderId) {
        //     const orderIdd = document.getElementById("orderId").textContent;
        //   console.log(orderIdd);
    if (!orderId) {
        Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Invalid order ID.",
        });
        return;
    }

    Swal.fire({
        title: "Are you sure?",
        text: "Do you want to cancel this order?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "Yes, cancel it!",
        cancelButtonText: "No, keep it",
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const response = await fetch(`/cancelOrder/${orderId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ status: "Cancelled" }),
                });

                const result = await response.json();

                if (response.ok) {
                    Swal.fire({
                        icon: "success",
                        title: "Cancelled!",
                        text: result.message || "Order has been cancelled.",
                    }).then(() => {
                        location.reload(); // Reload the page to reflect the changes
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Failed!",
                        text: result.error || "Could not cancel the order.",
                    });
                }
            } catch (error) {
                console.error("Error cancelling order:", error);
                Swal.fire({
                    icon: "error",
                    title: "Error!",
                    text: "An error occurred while trying to cancel the order.",
                });
            }
        }
    });
}



// Order return 
async function returnOrder(orderId) {
    // const orderIdd = document.getElementById("orderId").textContent;
    const finalAmount = document.getElementById("finalAmount").textContent.replace('â‚¹', '').trim();

    if (!orderId) {
        Swal.fire({
            title: "Oops",
            icon: "error",
            text: "Invalid Order ID",
        });
        return;
    }

    const { value: reason } = await Swal.fire({
        title: "Return Request",
        input: "text",
        inputLabel: "Reason for Return",
        inputPlaceholder: "Enter your return request",
        inputValidator: (value) => {
            if (!value || value.trim() === "") {
                return "Please enter a valid reason!";
            }
        },
    });

    if (reason) {
        try {
            const response = await fetch("/returnOrder", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    orderId: orderId,
                    reason: reason.trim(),
                    finalAmount:finalAmount,
                }),
            });

            if (!response.ok) {
                throw new Error("Failed to process return order");
            }

            const result = await response.json();

            Swal.fire({
                title: "Success",
                icon: "success",
                text: result.message || "Your return request has been submitted successfully!",
            })
            .then(()=>{
                window.location.reload();
            })
        } catch (error) {
            Swal.fire({
                title: "Error",
                icon: "error",
                text: error.message || "An error occurred while processing your return request.",
            });
        }
    }
};


async function rePayment(orderId) {
    try {
        // Get the final amount from the DOM
        const finalAmountElement = document.getElementById("finalAmount");
        if (!finalAmountElement) {
            throw new Error("Final amount element not found");
        }
        const finalAmount = finalAmountElement.textContent.replace('â‚¹', '').trim();
        
        console.log("Final Amount:", finalAmount);
        console.log("Order ID:", orderId);

        // Make the initial request to start the re-payment process
        const response = await fetch("/rePayment-order", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ orderId, finalAmount })
        });

        console.log("Response Status:", response.status);

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("Response Data:", data);

        if (data.success && data.razorpay) {
            const options = {
                key: data.razorpay.key,
                amount: data.razorpay.amount,
                currency: "INR",
                name: "Bulk Nation",
                description: "Re-Payment for Order",
                order_id: data.razorpay.order.id,
                handler: async function (response) {
                    try {
                        const verifyResponse = await fetch('/verify-repayment', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature,
                                orderId:data.orderId
                            })
                        });

                        if (!verifyResponse.ok) {
                            throw new Error(`HTTP error! status: ${verifyResponse.status}`);
                        }

                        const verifyData = await verifyResponse.json();
                        console.log("Verify Response:", verifyData);

                        if (verifyData.success) {
                            window.location.href = `/orderComform?id=${verifyData.orderId}&msg=repayment`;
                        } else {
                            throw new Error(verifyData.message || 'Re-Payment verification failed');
                        }
                    } catch (verifyError) {
                        console.error('Verify Re-Payment Error:', verifyError);
                        Swal.fire({
                            icon: 'error',
                            title: 'Re-Payment Verification Failed',
                            text: verifyError.message || 'An error occurred during payment verification.',
                        });
                    }
                },
                prefill: {
                    name: "Navas",
                    email: "navas@gmail.com",
                    contact: "7909173076"
                },
                theme: {
                    color: "#3399cc"
                }
            };

            // Load Razorpay script dynamically
            const script = document.createElement('script');
            script.src = 'https://checkout.razorpay.com/v1/checkout.js';
            script.async = true;
            script.onload = () => {
                const razorpayInstance = new Razorpay(options);
                razorpayInstance.open();
            };
            script.onerror = () => {
                throw new Error('Failed to load Razorpay script');
            };
            document.body.appendChild(script);
        } else {
            throw new Error(data.message || 'Unable to process re-payment.');
        }
    } catch (error) {
        console.error('Re-Payment Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'An unexpected error occurred. Please try again later.',
        });
    }
}

    </script>    
</body>
</html>
